resources:
  containers:
  - container: sonarscanner
    image: sonarsource/sonar-scanner-cli:latest
    options:  --useradd -m -u 1001 vsts_azpcontainer, --tty
  - container: node
    image: node:14

  - container: kaniko
    image: gcr.io/kaniko-project/executor:debug-1534f90c9330d40486136b2997e7972a79a69baf

  - container: openshift-cli
    image: openshift/origin-cli:v3.11.0
    
pool: 'Hosted Ubuntu 1604'

variables:
  buildConfiguration: 'Release'
  system.debug: true
  SONARQUBE_URL: https://sonarqube-1749-3725.dc-ig-lib-ga-1589529604-f72ef11f3ab089a8c677044eb28292cd-0000.au-syd.containers.appdomain.cloud
  NAMESPACE: dc-apps
  K8S_DEPLOYMENT: spring-java-test
  DOCKER_URL: us.icr.io/dc-tools
  REGISTRY_USERNAME: iamapikey
  REGISTRY_PASSWORD: kdQcmbzIwWpFXrwuug-4Nx4qtogisKML-iGIukTXbI6o
  DOCKER_IMAGE: nodejs
  DOCKER_TAG: '${BUILD_BUILDNUMBER}'
  DOCKER_USERNAME: iamapikey
  DOCKER_PASSWORD: kdQcmbzIwWpFXrwuug-4Nx4qtogisKML-iGIukTXbI6o
  INGRESS_URL: dc-ig-l
  OCP_URL: https://c100-e.au-syd.containers.cloud.ibm.com:31995


     
stages:
- stage: Build
  jobs:
  - job: build
    container: node

    steps:
    - script: |
         npm install --only=prod
         npm install -D express jest
         npm install -D sonarqube-scanner jest-sonar-reporter supertest
    continueOnError: true

- stage: Test
  jobs:
  - job: Unit_Test
    container: node
    steps:
    - script: CI=true
    - script: npm run test
  
- stage:
  jobs:
  - job: Sonnar_Scan
    container: sonarscanner
    steps:
    - script: |
        pwd
        ls -ltr
        mkdir .sonar .sonar/cache .scannerwork
        chmod -R 777 .sonar
        chmod -R 777 .scannerwork
        export SONAR_USER_HOME=${BUILD_ARTIFACTSTAGINGDIRECTORY}
        sonar-scanner \
        -Dsonar.host.url=${SONARQUBE_URL} \
        -Dsonar.projectKey=${NAMESPACE}-${K8S_DEPLOYMENT} \
        -Dsonar.sources=. \
        -Dsonar.projectVersion=${BUILD_ID} \
        -Dsonar.exclusions=node_modules/** 
  

- stage:
  jobs:
  - job: Build_docker
    container: kaniko
    steps:
    - script: |
        mkdir -p /kaniko/.docker
        echo '{\"auths\":{\"'${DOCKER_URL}'\":{\"username\":\"'${REGISTRY_USERNAME}'\",\"password\":\"'${REGISTRY_PASSWORD}'\"}}}' > /kaniko/.docker/config.json
        cat /kaniko/.docker/config.json
        /kaniko/executor -f `pwd`/Dockerfile -c `pwd` --insecure --skip-tls-verify --cache=true --destination=${DOCKER_URL}/${DOCKER_IMAGE}:${DOCKER_TAG}
  
      
      
 
- stage:
  jobs:
  - job: Sonar_Scan
    container: sonarscanner
    steps:
    - script: |
          sonar-scanner \
          -Dsonar.host.url=${SONARQUBE_URL} \
          -Dsonar.projectKey=${NAMESPACE}-${K8S_DEPLOYMENT} \
          -Dsonar.scm.provider=git \
          -Dsonar.coverageReportPaths=test-results.xml \
                -Dsonar.sources=. \
          -Dsonar.projectVersion=${BUILD_SOURCEBRANCH}-${BUILD_BUILDNUMBER}
  
  
  
  
  
- stage: Openshitf
  jobs:
  - job: Deploy_To_Openshift
    container: openshift-cli
    steps:
    - script: |
          oc login --server="${OCP_URL}" --token="${TOKEN}"
          oc project ${NAMESPACE}
          pwd
          ls -ltr
          oc create secret docker-registry docker-repo-cred \
          --docker-server=${DOCKER_URL} \
          --docker-username=${DOCKER_USERNAME} \
          --docker-password=${DOCKER_PASSWORD} \
          --docker-email=${DOCKER_PASSWORD} \
          --namespace=${NAMESPACE} || true

          sed -e "s~{REGISTRY_NAME}~$DOCKER_URL~g" \
              -e "s~{DOCKER_IMAGE}~$DOCKER_IMAGE~g" \
              -e "s~{DOCKER_TAG}~$DOCKER_TAG~g" \
              -e "s~{K8S_DEPLOYMENT}~$K8S_DEPLOYMENT~g" \
              -e "s~{NAMESPACE}~$NAMESPACE~g"\
              -e "s~{INGRESS_URL}~$INGRESS~g" -i devops/k8s/*.yml
              
          oc apply -f devops/k8s/ --namespace="${NAMESPACE}" || true
          oc create route edge --service=${K8S_DEPLOYMENT}-svc --hostname=$K8S_DEPLOYMENT.$INGRESS ||true
          oc get route ${K8S_DEPLOYMENT}-svc || true
          oc wait --for=condition=available --timeout=120s deployment/${K8S_DEPLOYMENT} --namespace="${NAMESPACE}" || true